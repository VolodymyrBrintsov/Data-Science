}
res <- corr.test(df)
res$r[res$r == 1] <- 0
return(max(abs(res$r)))
df <- data.frame()
for (i in colnames(iris)){
if (is.numeric(iris[i])){
df <- cbind(df, iris[i])
}
}
res <- corr.test(df)
res$r[res$r == 1] <- 0
return(max(abs(res$r)))
df <- data.frame()
for (i in colnames(iris)){
if (is.numeric(iris[i])){
df <- cbind(df, iris[i])
}
}
res <- corr.test(df)
res$r[res$r == 1] <- 0
max(abs(res$r))
filtered.cor <- function(x){
df <- data.frame()
for (i in colnames(x)){
if (is.numeric(x[i])){
df <- cbind(df, x[i])
}
}
res <- corr.test(df)
res$r[res$r == 1] <- 0
return(max(abs(res$r)))
}
filtered.cor(iris)
library(psych)
filtered.cor <- function(x){
df <- data.frame()
for (i in colnames(x)){
if (is.numeric(,x[i])){
df <- cbind(df, x[,i])
}
}
res <- corr.test(df)
res$r[res$r == 1] <- 0
return(max(abs(res$r)))
}
filtered.cor(iris)
filtered.cor(iris)
filtered.cor <- function(x){
df <- data.frame()
for (i in colnames(x)){
print(x[, i])
if (is.numeric(x[,i])){
df <- cbind(df, x[,i])
}
}
res <- corr.test(df)
res$r[res$r == 1] <- 0
return(max(abs(res$r)))
}
filtered.cor(iris)
filtered.cor <- function(x){
df <- data.frame(check.names = T)
for (i in colnames(x)){
print(x[, i])
if (is.numeric(x[,i])){
df <- cbind(df, x[,i])
}
}
res <- corr.test(df)
res$r[res$r == 1] <- 0
return(max(abs(res$r)))
}
filtered.cor(iris)
filtered.cor <- function(x){
df <- sapply(x, is.numeric)
res <- corr.test(df)
res$r[res$r == 1] <- 0
return(max(abs(res$r)))
}
filtered.cor(iris)
filtered.cor <- function(x){
df <- sapply(x, is.numeric)
View(df)
res <- corr.test(df)
res$r[res$r == 1] <- 0
return(max(abs(res$r)))
}
filtered.cor(iris)
filtered.cor(iris)
function (x, y = NULL, use = "everything", method = c("pearson",
"kendall", "spearman"))
{
na.method <- pmatch(use, c("all.obs", "complete.obs", "pairwise.complete.obs",
"everything", "na.or.complete"))
if (is.na(na.method))
stop("invalid 'use' argument")
method <- match.arg(method)
if (is.data.frame(y))
y <- as.matrix(y)
if (is.data.frame(x))
x <- as.matrix(x)
if (!is.matrix(x) && is.null(y))
stop("supply both 'x' and 'y' or a matrix-like 'x'")
if (!(is.numeric(x) || is.logical(x)))
stop("'x' must be numeric")
stopifnot(is.atomic(x))
if (!is.null(y)) {
if (!(is.numeric(y) || is.logical(y)))
stop("'y' must be numeric")
stopifnot(is.atomic(y))
}
Rank <- function(u) {
if (length(u) == 0L)
u
else if (is.matrix(u)) {
if (nrow(u) > 1L)
apply(u, 2L, rank, na.last = "keep")
else row(u)
}
else rank(u, na.last = "keep")
}
if (method == "pearson")
.Call(C_cor, x, y, na.method, FALSE)
else if (na.method %in% c(2L, 5L)) {
if (is.null(y)) {
.Call(C_cor, Rank(na.omit(x)), NULL, na.method,
method == "kendall")
}
else {
nas <- attr(na.omit(cbind(x, y)), "na.action")
dropNA <- function(x, nas) {
if (length(nas)) {
if (is.matrix(x))
x[-nas, , drop = FALSE]
else x[-nas]
}
else x
}
.Call(C_cor, Rank(dropNA(x, nas)), Rank(dropNA(y,
nas)), na.method, method == "kendall")
}
}
else if (na.method != 3L) {
x <- Rank(x)
if (!is.null(y))
y <- Rank(y)
.Call(C_cor, x, y, na.method, method == "kendall")
}
else {
if (is.null(y)) {
ncy <- ncx <- ncol(x)
if (ncx == 0)
stop("'x' is empty")
r <- matrix(0, nrow = ncx, ncol = ncy)
for (i in seq_len(ncx)) {
for (j in seq_len(i)) {
x2 <- x[, i]
y2 <- x[, j]
ok <- complete.cases(x2, y2)
x2 <- rank(x2[ok])
y2 <- rank(y2[ok])
r[i, j] <- if (any(ok))
.Call(C_cor, x2, y2, 1L, method == "kendall")
else NA
}
}
r <- r + t(r) - diag(diag(r))
rownames(r) <- colnames(x)
colnames(r) <- colnames(x)
r
}
else {
if (length(x) == 0L || length(y) == 0L)
stop("both 'x' and 'y' must be non-empty")
matrix_result <- is.matrix(x) || is.matrix(y)
if (!is.matrix(x))
x <- matrix(x, ncol = 1L)
if (!is.matrix(y))
y <- matrix(y, ncol = 1L)
ncx <- ncol(x)
ncy <- ncol(y)
r <- matrix(0, nrow = ncx, ncol = ncy)
for (i in seq_len(ncx)) {
for (j in seq_len(ncy)) {
x2 <- x[, i]
y2 <- y[, j]
ok <- complete.cases(x2, y2)
x2 <- rank(x2[ok])
y2 <- rank(y2[ok])
r[i, j] <- if (any(ok))
.Call(C_cor, x2, y2, 1L, method == "kendall")
else NA
}
}
rownames(r) <- colnames(x)
colnames(r) <- colnames(y)
if (matrix_result)
r
else drop(r)
}
}
}
filtered.cor <- function(x){
df <- sapply(x, is.numeric)
View(df)
res <- corr.test(df)
res$r[res$r == 1] <- 0
return(max(abs(res$r)))
}
filtered.cor <- function(x){
df <- sapply(x, is.numeric)
View(df)
res <- corr.test(df)
res$r[res$r == 1] <- 0
return(max(abs(res$r)))
}
print(filtered.cor(mtcars))
filtered.cor <- function(x){
df <- x[,sapply(x, is.numeric)]
View(df)
res <- corr.test(df)
res$r[res$r == 1] <- 0
return(max(abs(res$r)))
}
print(filtered.cor(mtcars))
filtered.cor <- function(x){
df <- x[,sapply(x, is.numeric)]
View(df)
res <- corr.test(df)
corr_matrix <- subset(res$r, select = -diag(c(res$r)))
return(max(abs(res$r)))
}
print(filtered.cor(mtcars))
filtered.cor <- function(x){
df <- x[,sapply(x, is.numeric)]
View(df)
res <- corr.test(df)
diag(res) <- 0
print(res$r)
return(max(abs(res$r)))
}
print(filtered.cor(mtcars))
filtered.cor <- function(x){
df <- x[,sapply(x, is.numeric)]
View(df)
res <- corr.test(df)
diag(res$r) <- 0
print(res$r)
return(max(abs(res$r)))
}
print(filtered.cor(mtcars))
filtered.cor <- function(x){
df <- x[,sapply(x, is.numeric)]
res <- corr.test(df)
diag(res$r) <- 0
vmin <- min(res$r)
vmax <- max(res$r)
return(ifelse(abs(vmin)>vmax, vmin, vmax))
}
print(filtered.cor(mtcars))
smart.cor <- function(x){
norm_test1 <- shapiro.test(x[[1]])
norm_test2 <- shapiro.test(x[[2]])
if (norm_test1 > 0.05 $ norm_test2 > 0.05){
return(cor.test(x[[1]], x[[2]])$estimate)
} else{
return(cor.test(x[[1]], x[[2]], method='spearman')$estimate)
}
}
smart.cor <- function(x){
norm_test1 <- shapiro.test(x[[1]])
norm_test2 <- shapiro.test(x[[2]])
if (norm_test1 > 0.05 $ norm_test2 > 0.05){
return(cor.test(x[[1]], x[[2]])$estimate)
} else{
return(cor.test(x[[1]], x[[2]], method='spearman')$estimate)
}
}
smart.cor(iris[1, 2])
smart_cor <- function(x){
x1 <- shapiro.test(x[[1]])$p.value
x2 <- shapiro.test(x[[2]])$p.value
if ((x1<0.5) | (x2<0.5)) {
res <- cor.test(~ x[, 1]+x[, 2], x, method = "spearman")
} else {cor.test(~ x[, 1]+x[, 2], x, method = "pearson")
}
return(res$
smart.cor(iris[1, 2])
fit <- lm(mpg ~ hp, df)
fit
summary(fit)
fit <- lm(mpg ~ hp, df)
fit
summary(fit)
df <- mtcars
View(df)
#Correlation
corr <- cor.test(df$mpg, df$hp)
str(corr)
ggplot(df, aes(mpg, hp, col=factor(cyl), size=qsec)) +
geom_point()
num_df <- df[,c(1, 3:7)]
pairs(num_df)
cor(num_df)
library(psych)
corr.test(num_df)
#Simple Linear Regression
fit <- lm(mpg ~ hp, df)
fit
summary(fit)
ggplot(df, aes(hp, mpg)) +
geom_point(size=4) +
geom_smooth(method = "lm"
)
ggplot(df, aes(hp, mpg, col=factor(am))) +
geom_point(size=4) +
geom_smooth(method = "lm")
ggplot(df, aes(hp, mpg, col=factor(am))) +
geom_point(size=4) +
geom_smooth(method = "lm") +
facet_grid(~cyl)
ggplot(df, aes(hp, mpg)) +
geom_point(size=4) +
geom_smooth(method = "lm") +
facet_grid(~cyl)
fitted_values <- data.fram(mpg=df$mpg, fitted<-fit$fitted.values)
fitted_values <- data.frame(mpg=df$mpg, fitted<-fit$fitted.values)
View(fitted_values)
predict(fit, c(100, 150))
predict(fit, data.frame(hp = c(100, 150))
)
#Simple data for LM
df <- read.csv("~/Downloads/dataset_11508_12.txt")
view(df)
#Simple data for LM
df <- read.csv("~/Downloads/dataset_11508_12.txt")
View(df)
df <- read.csv("~/Downloads/dataset_11508_12.txt")
View(df)
fit<- lm(df[[1]]~df[[2]])
summary(fit
)
fit<- lm(df[1]~df[2])
summary(fit)
df <- read.csv("~/Downloads/dataset_11508_12.txt")
View(df)
fit<- lm(df[1]~df[2])
summary(fit)
df <- read.csv("~/Downloads/dataset_11508_12.txt")
fit<- lm(df[1]~df[2])
summary(fit)
#Simple data for LM
t <- read.csv("~/Downloads/grants_data.zip", sep = "", head = F, dec = '.')
View(df)
fit<- lm(df[1]~df[2])
summary(fit)
df <- mtcars
View(df)
#Correlation
corr <- cor.test(df$mpg, df$hp)
str(corr)
ggplot(df, aes(mpg, hp, col=factor(cyl), size=qsec)) +
geom_point()
num_df <- df[,c(1, 3:7)]
pairs(num_df)
cor(num_df)
library(psych)
corr.test(num_df)
#Simple Linear Regression
fit <- lm(mpg ~ hp, df)
fit
summary(fit)
ggplot(df, aes(hp, mpg)) +
geom_point(size=4) +
geom_smooth(method = "lm") +
facet_grid(~cyl)
fitted_values <- data.frame(mpg=df$mpg, fitted<-fit$fitted.values)
View(fitted_values)
predict(fit, data.frame(hp = c(100, 150)))
#Simple data for LM
t <- read.csv("~/Downloads/grants_data.zip", sep = "", head = F, dec = '.')
View(df)
fit<- lm(df[1]~df[2])
summary(fit)
imple data for LM
dataframe1 <- read.table("~/Downloads//dataset_11508_12.txt", sep=' ' )
mod1 <- lm(dataframe1[,1]~dataframe1[,2], dataframe1)
print(round(mod1$coefficients,2))
dataframe1 <- read.table("~/Downloads//dataset_11508_12.txt", sep=' ' )
mod1 <- lm(dataframe1[,1]~dataframe1[,2], dataframe1)
print(mod1$coefficients)
library(ggplot2)
my_plot <- ggplot(iris, aes(Sepal.Width, Pepal.Width, col=Species)) +
geom_point()
geom_smooth(method='linear')
library(ggplot2)
my_plot <- ggplot(iris, aes(Sepal.Width, Pepal.Width, col=Species)) +
geom_point()
geom_smooth(method='linear')
my_plot
library(ggplot2)
my_plot <- ggplot(iris, aes(Sepal.Width, Pepal.Width, col=Species)) +
geom_point()
geom_smooth(method='linear')
library(ggplot2)
my_plot <- ggplot(iris, aes(Sepal.Width, Petal.Width, col=Species)) +
geom_point()
geom_smooth(method='linear')
library(ggplot2)
my_plot <- ggplot(iris, aes(Sepal.Width, Petal.Width, col=Species)) +
geom_point()
geom_smooth(method='linear')
my_plot
library(ggplot2)
my_plot <- ggplot(iris, aes(Sepal.Width, Petal.Width, col=Species)) +
geom_point()
geom_smooth(method='lm')
my_plot
library(ggplot2)
my_plot <- ggplot(iris, aes(Sepal.Width, Petal.Width, col=Species)) +
geom_point() +
geom_smooth(method='lm')
my_plot
df <- data.frame(swiss)
View(df)
str(df)
ggplot(df, aes(Fetility)) +
geom_histogram()
ggplot(df, aes(Fertility)) +
geom_histogram()
ggplot(df, aes(Fertility)) +
geom_histogram(fill='white', col='black', binwidth = 0.4)
ggplot(df, aes(Fertility)) +
geom_histogram(fill='white', col='black', binwidth = 2)
fit <- lm(Fertility ~ Examination + Catholic, df)
summary(fit)
##MultiReg with interaction
inter_fit <- lm(Fertility ~ Examination * Catholic, df)
summary(inter_fit)
##Confindence interval for linear reg
confint(inter_fit)
lm(na.pass = T)
lm(Sepal.Length ~ Sepal.Width, iris,na.pass = T)
lm(Sepal.Length ~ Sepal.Width, iris, na.action = na.omit)
x <- data.frame(x_1 = c(1, 2, 3, 4, 5, 6), x_2 = c(5, 3, 2, 1, 3, 4), y = c(4, NA, 3, NA, 3, 3, NA))
fit <- lm(y ~ x_1 + x_2, x, na.action = na.omit)
x$y_full <- ifelse(is.na(x$y), predict(fit, x[, "x_1"] + x[, "x_2"]), x$y)
return(x)
x <- data.frame(x_1 = c(1, 2, 3, 4, 5, 6), x_2 = c(5, 3, 2, 1, 3, 4), y = c(4, NA, 3, NA, 3, 3, NA))
x <- data.frame(x_1 = c(1, 2, 3, 4, 5, 6), x_2 = c(5, 3, 2, 1, 3, 4), y = c(4, NA, 3, NA, 3, 3))
fit <- lm(y ~ x_1 + x_2, x, na.action = na.omit)
x$y_full <- ifelse(is.na(x$y), predict(fit, x[, "x_1"] + x[, "x_2"]), x$y)
return(x)
fit <- lm(y ~ x_1 + x_2, x, na.action = na.omit)
x$y_full <- ifelse(is.na(x$y), predict(fit, x[, "x_1"] + x[, "x_2"]), x$y)
x$y_full <- ifelse(is.na(x$y), predict(fit, x[, 1] + x[, 2]), x$y)
return(x)
x$y_full <- ifelse(is.na(x$y), predict(fit, x[,1:2]), x$y)
return(x)
x <- data.frame(x_1 = c(1, 2, 3, 4, 5, 6), x_2 = c(5, 3, 2, 1, 3, 4), y = c(4, NA, 3, NA, 3, 3))
fit <- lm(y ~ x_1 + x_2, x, na.action = na.omit)
x$y_full <- ifelse(is.na(x$y), predict(fit, x[,1:2]), x$y)
return(x)
print(x)
df <- mtcars[, c("wt", "mpg", "hp", "disp", "drat")]
model <- lm(wt ~., df)
summary(model)
model <- lm(wt ~., df)
summary(model)
df <- mtcars[, c("wt", "mpg", "hp", "disp")]
model <- lm(wt ~., df)
summary(model)
model <- lm(wt ~ mpg, hp, disp, df)
summary(model)
summary(lm(rating ~ complaints + critical, attitude))
summary(lm(rating ~ complaints * critical, attitude))
mtcars$am <- factor(mtcars$am, labels = c('Automatic', 'Manual'))
summary(lm(mpg ~ wt * am, mtcars))
summary(lm(mpg ~ am * wt, mtcars))
ggplot(mtcars, aes(wt, mpg, col=am)) +
geom_point() +
geom_smooth(method = "lm")
#Model Selection
df <- data.frame(swiss)
full_model <- lm(Fertility ~., df)
step(full_model, direction = "backward")
optimal_fit <- step(full_model, direction = "backward")
summary(optimal_fit)
model_full <- lm(rating ~ ., data = attitude)
model_null <- lm(rating ~ 1, data = attitude)
anova(model_full, model_null)
anova(model_null, model_full)
ideal_model <- step(model_full, direction="backward", scope = list(lower = model_null, upper = model_full))
ideal_model <- step(model_full, direction="backward", scope = list(lower = model_null, upper = model_full))
summary(ideal_model)
idel_model <- lm(rating ~ complaints + learning, data=attitude)
anova(idel_model, model_full)
model_full <- lm(sr ~ , LifeCycleSavings)
model_full <- lm(sr ~ ., LifeCycleSavings)
ideal_model <- step(model_full, direction="backward")
summary(ideal_model)
ideal_model <- lm(formula = sr ~ pop15 + pop75 + ddpi, data = LifeCycleSavings)
model <- lm(formula = sr ~ (pop15 + pop75 + ddpi)^2, data = LifeCycleSavings)
model
model_full <- lm(sr ~ ., LifeCycleSavings)
ideal_model <- step(model_full, direction="backward")
my_vector <- c(0.027, 0.079, 0.307, 0.098, 0.021, 0.091, 0.322, 0.211, 0.069, 0.261, 0.241, 0.166, 0.283, 0.041, 0.369, 0.167, 0.001, 0.053, 0.262, 0.033, 0.457, 0.166, 0.344, 0.139, 0.162, 0.152, 0.107, 0.255, 0.037, 0.005, 0.042, 0.220, 0.283, 0.050, 0.194, 0.018, 0.291, 0.037, 0.085, 0.004, 0.265, 0.218, 0.071, 0.213, 0.232, 0.024, 0.049, 0.431, 0.061, 0.523)
shapiro.test(log(my_vector))
shapiro.test(sqrt(my_vector))
shapiro.test(1/(my_vector))
?scale
